//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Examen.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PP_KADNIKOV3Entities : DbContext
    {
        public PP_KADNIKOV3Entities()
            : base("name=PP_KADNIKOV3Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalDocuments> AdditionalDocuments { get; set; }
        public virtual DbSet<doljnost> doljnost { get; set; }
        public virtual DbSet<Experience> Experience { get; set; }
        public virtual DbSet<Family> Family { get; set; }
        public virtual DbSet<Obrazovanie> Obrazovanie { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Passport> Passport { get; set; }
        public virtual DbSet<Sotrudnik> Sotrudnik { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Transactionprogram> Transactionprogram { get; set; }
        public virtual DbSet<usersProgram> usersProgram { get; set; }
        public virtual DbSet<Waruchet> Waruchet { get; set; }
        public virtual DbSet<ZayvleniyJob> ZayvleniyJob { get; set; }
        public virtual DbSet<Otpusk> Otpusk { get; set; }
    
        public virtual int AddSotrudnik(string fam, string nam, string oth, string tel, Nullable<System.DateTime> dat, string english, string grajdan, string brak, string mRojd, string mPol, string idennam, string mOKIN)
        {
            var famParameter = fam != null ?
                new ObjectParameter("fam", fam) :
                new ObjectParameter("fam", typeof(string));
    
            var namParameter = nam != null ?
                new ObjectParameter("nam", nam) :
                new ObjectParameter("nam", typeof(string));
    
            var othParameter = oth != null ?
                new ObjectParameter("oth", oth) :
                new ObjectParameter("oth", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var datParameter = dat.HasValue ?
                new ObjectParameter("dat", dat) :
                new ObjectParameter("dat", typeof(System.DateTime));
    
            var englishParameter = english != null ?
                new ObjectParameter("english", english) :
                new ObjectParameter("english", typeof(string));
    
            var grajdanParameter = grajdan != null ?
                new ObjectParameter("grajdan", grajdan) :
                new ObjectParameter("grajdan", typeof(string));
    
            var brakParameter = brak != null ?
                new ObjectParameter("brak", brak) :
                new ObjectParameter("brak", typeof(string));
    
            var mRojdParameter = mRojd != null ?
                new ObjectParameter("mRojd", mRojd) :
                new ObjectParameter("mRojd", typeof(string));
    
            var mPolParameter = mPol != null ?
                new ObjectParameter("mPol", mPol) :
                new ObjectParameter("mPol", typeof(string));
    
            var idennamParameter = idennam != null ?
                new ObjectParameter("idennam", idennam) :
                new ObjectParameter("idennam", typeof(string));
    
            var mOKINParameter = mOKIN != null ?
                new ObjectParameter("mOKIN", mOKIN) :
                new ObjectParameter("mOKIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSotrudnik", famParameter, namParameter, othParameter, telParameter, datParameter, englishParameter, grajdanParameter, brakParameter, mRojdParameter, mPolParameter, idennamParameter, mOKINParameter);
        }
    
        public virtual ObjectResult<LoadGridSotrudnik_Result> LoadGridSotrudnik()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadGridSotrudnik_Result>("LoadGridSotrudnik");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateSotrudnik(Nullable<int> iD, string fam, string nam, string oth, string tel, Nullable<System.DateTime> dat, string english, string grajdan, string brak, string mRojd, string mPol, string idennam, string mOKIN)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var famParameter = fam != null ?
                new ObjectParameter("fam", fam) :
                new ObjectParameter("fam", typeof(string));
    
            var namParameter = nam != null ?
                new ObjectParameter("nam", nam) :
                new ObjectParameter("nam", typeof(string));
    
            var othParameter = oth != null ?
                new ObjectParameter("oth", oth) :
                new ObjectParameter("oth", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var datParameter = dat.HasValue ?
                new ObjectParameter("dat", dat) :
                new ObjectParameter("dat", typeof(System.DateTime));
    
            var englishParameter = english != null ?
                new ObjectParameter("english", english) :
                new ObjectParameter("english", typeof(string));
    
            var grajdanParameter = grajdan != null ?
                new ObjectParameter("grajdan", grajdan) :
                new ObjectParameter("grajdan", typeof(string));
    
            var brakParameter = brak != null ?
                new ObjectParameter("brak", brak) :
                new ObjectParameter("brak", typeof(string));
    
            var mRojdParameter = mRojd != null ?
                new ObjectParameter("mRojd", mRojd) :
                new ObjectParameter("mRojd", typeof(string));
    
            var mPolParameter = mPol != null ?
                new ObjectParameter("mPol", mPol) :
                new ObjectParameter("mPol", typeof(string));
    
            var idennamParameter = idennam != null ?
                new ObjectParameter("idennam", idennam) :
                new ObjectParameter("idennam", typeof(string));
    
            var mOKINParameter = mOKIN != null ?
                new ObjectParameter("mOKIN", mOKIN) :
                new ObjectParameter("mOKIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSotrudnik", iDParameter, famParameter, namParameter, othParameter, telParameter, datParameter, englishParameter, grajdanParameter, brakParameter, mRojdParameter, mPolParameter, idennamParameter, mOKINParameter);
        }
    }
}
